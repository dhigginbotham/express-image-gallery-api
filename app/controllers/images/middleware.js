// Generated by CoffeeScript 1.6.2
var Image, fs, path, _images;

Image = require("../../models/images");

fs = require("fs");

path = require("path");

_images = module.exports = {
  createFile: function(req, res, next) {
    req._path = path.join(__dirname, "..", "..", "..", "public", "uploads", req.files.file.name);
    console.log("im getting hit nigga");
    return fs.readFile(req.files.file.path, function(err, data) {
      return fs.writeFile(req._path, data, function(err) {
        if (err != null) {
          next(err, null);
        }
        return next(null, data);
      });
    });
  },
  handle: function(req, res, next) {
    var img;

    img = new Image({
      name: req.files.file.name,
      type: req.files.file.type,
      lastModifiedDate: req.files.file.lastModifiedDate,
      path: req._path,
      size: req.files.file.size,
      who: req.user,
      tags: req.body.tags
    });
    return img.save(function(err, image) {
      if (err) {
        return next(err, null);
      }
      return next();
    });
  },
  editImg: function(req, res, next) {
    var img, published, tags;

    console.log(req.body);
    if ((req.body != null) && (req.body.title != null)) {
      published = req.body.published != null ? true : false;
      tags = req.body.tagInput != null ? req.body.tagInput.split(',') : [];
      img = {
        title: req.body.title,
        published: published,
        tags: tags
      };
      return Image.update({
        _id: req.params.id
      }, img, {
        safe: true
      }, function(err, img) {
        if (err != null) {
          req.flash("info", {
            type: "error",
            title: "Oh Snap!",
            msg: "There was an error!"
          });
          next();
        }
        if (img != null) {
          req.flash("info", {
            type: "success",
            title: "Awesome",
            msg: "Image data successfully updated!"
          });
          req._img = img;
        }
        return process.nextTick(function() {
          return next();
        });
      });
    }
  },
  findOne: function(req, res, next) {
    return Image.findOne({
      _id: req.params.id
    }).populate("who tags").exec(function(err, image) {
      if (err != null) {
        req.flash("info", {
          type: "error",
          title: "Oh Snap!",
          msg: "There was an error!"
        });
        next();
      }
      if (image != null) {
        req.findOne = image;
        return next();
      } else {
        req.flash("info", {
          type: "error",
          title: "Oh Snap!",
          msg: "No image found... sorry, try again."
        });
        return next();
      }
    });
  },
  findAll: function(req, res, next) {
    return Image.findAll(function(err, image) {
      if (err) {
        req.flash("info", {
          type: "error",
          title: "Oh Snap!",
          msg: "There was an error!"
        });
        next();
      }
      if (image != null) {
        req.findAll = image;
        return next();
      } else {
        req.flash("info", {
          type: "error",
          title: "Oh Snap!",
          msg: "No pages found... sorry, try again."
        });
        return next();
      }
    });
  },
  pagesPagination: function(req, res, next) {
    var sort;

    sort = {
      ts: -1
    };
    return Image.find().sort(sort).paginate({
      page: req.params.page,
      perPage: 5
    }, function(err, pages) {
      if (err) {
        req.flash("info", {
          type: "error",
          title: "Oh Snap!",
          msg: "wasn't able to find any pages"
        });
        return next();
      } else {
        req._page = pages;
        return next();
      }
    });
  }
};
